{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport data, { answers } from \"../database/data\";\n\n/** redux actions */\nimport * as Action from '../Redux/question_reducer.js';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        let question = await data;\n        await get;\n        if (question.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: question\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","data","answers","Action","useFetchQestion","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","question","get","length","startExamAction","Error","error","MoveNextQuestion","moveNextAction","console","log","MovePrevQuestion","movePrevAction"],"sources":["/home/rashka-dahir/Desktop/Quiz-WebApp/frontend-quiz-webapp/src/hook/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport data, { answers } from \"../database/data\";\n\n/** redux actions */\nimport * as Action from '../Redux/question_reducer.js'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                let question = await data;\n                await get\n         \n                if(question.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : question}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({question, answers}))\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,IAAI,IAAIC,OAAO,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,8BAA8B;;AAEtD;AACA,OAAO,MAAMC,eAAe,GAAG,MAAM;EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,IAAII,QAAQ,GAAG,MAAMX,IAAI;QACzB,MAAMY,GAAG;QAET,IAAGD,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAC;UACnBP,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAQ,CAAC,CAAC,CAAC;;UAEnD;UACAP,QAAQ,CAACF,MAAM,CAACY,eAAe,CAAC;YAACH,QAAQ;YAAEV;UAAO,CAAC,CAAC,CAAC;QACzD,CAAC,MAAK;UACF,MAAM,IAAIc,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZV,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGO;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,GAAG;EACR,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAA,GAjCaH,eAAe;EAAA,QACPJ,WAAW;AAAA;AAiChC,OAAO,MAAMkB,gBAAgB,GAAG,MAAM,MAAOb,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACF,MAAM,CAACgB,cAAc,EAAE,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAG,MAAM,MAAOjB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACF,MAAM,CAACoB,cAAc,EAAE,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}